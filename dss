1.Fitting and plotting of modified exponential curve
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
# Generate sample data
np.random.seed(0)
x_data = np.linspace(0, 4, 50)
a, b, c = 2.5, 1.3, 0.5
y_data = a * np.exp(b * x_data) + c + 0.5 * 
np.random.normal(size=x_data.size)
# Define the modified exponential function
def modified_exponential(x, a, b, c):
 return a * np.exp(b * x) + c
# Fit the curve
4
Msc Data Science(Sem II)
Akash Mishra
popt, pcov = curve_fit(modified_exponential, x_data, y_data, 
p0=(1, 1, 1))
# Get the fitted parameters
a_fit, b_fit, c_fit = popt
print(f"Fitted parameters: a={a_fit}, b={b_fit}, c={c_fit}")
# Generate y values using the fitted parameters
y_fit = modified_exponential(x_data, *popt)
# Plot the data and the fitted curve
plt.scatter(x_data, y_data, label='Data')
plt.plot(x_data, y_fit, color='red', label='Fitted curve')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.show()


2.Fitting and plotting of Gompertz curve
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
def gompertz(t, a, b, c):
 return a * np.exp(-b * np.exp(-c * t))
# Parameters for the true Gompertz function
a_true = 100
b_true = 2
c_true = 0.1
# Generate synthetic data
t_data = np.linspace(0, 50, 100)
y_true = gompertz(t_data, a_true, b_true, c_true)
noise = np.random.normal(0, 5, size=t_data.shape)
y_data = y_true + noise
# Initial guess for the parameters
initial_guess = [90, 1, 0.1]
# Fit the curve
popt, pcov = curve_fit(gompertz, t_data, y_data, 
p0=initial_guess)
# Extract the fitted parameters
a_fit, b_fit, c_fit = popt
print(f"Fitted parameters: a = {a_fit}, b = {b_fit}, c = 
{c_fit}")
# Generate the fitted curve
y_fit = gompertz(t_data, a_fit, b_fit, c_fit)
# Plot the data and the fitted curve
plt.figure(figsize=(10, 6))
plt.scatter(t_data, y_data, label='Data', color='blue', 
s=10)
plt.plot(t_data, y_true, label='True Gompertz Curve', 
color='green', linestyle='dashed')
plt.plot(t_data, y_fit, label='Fitted Gompertz Curve', 
color='red')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.title('Gompertz Curve Fitting')
plt.show()


3.Fitting and plotting of logistic curve.
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
def logistic(t, L, k, t0):
 return L / (1 + np.exp(-k * (t - t0)))
# Parameters for the true logistic function
L_true = 100
k_true = 0.1
t0_true = 10
# Generate synthetic data
t_data = np.linspace(0, 50, 100)
y_true = logistic(t_data, L_true, k_true, t0_true)
noise = np.random.normal(0, 5, size=t_data.shape)
y_data = y_true + noise
# Initial guess for the parameters
initial_guess = [90, 0.1, 10]
# Fit the curve
popt, pcov = curve_fit(logistic, t_data, y_data, 
p0=initial_guess)
# Extract the fitted parameters
L_fit, k_fit, t0_fit = popt
print(f"Fitted parameters: L = {L_fit}, k = {k_fit}, t0 
= {t0_fit}")
# Generate the fitted curve
y_fit = logistic(t_data, L_fit, k_fit, t0_fit)
# Plot the data and the fitted curve
plt.figure(figsize=(10, 6))
plt.scatter(t_data, y_data, label='Data', color='blue', 
s=10)
plt.plot(t_data, y_true, label='True Logistic Curve', 
color='green', linestyle='dashed')
plt.plot(t_data, y_fit, label='Fitted Logistic Curve', 
color='red')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.title('Logistic Curve Fitting')
plt.show()


4.Fitting of trend by Moving Average Method.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
np.random.seed(0) # For reproducibility
# Generate synthetic time series data
time = np.arange(1, 101)
trend = 0.5 * time # Linear trend
seasonal = 10 * np.sin(0.2 * time) # Seasonal component
15
Msc Data Science(Sem II)
Akash Mishra
noise = np.random.normal(0, 5, size=time.shape)# Random 
noise
data = trend + seasonal + noise
# Create a pandas DataFrame for convenience
df = pd.DataFrame({'Time': time, 'Data': data})
# Define the window size
window_size = 5
# Apply the moving average
df['Moving_Average'] = 
df['Data'].rolling(window=window_size).mean()
# Plot the data
plt.figure(figsize=(12, 6))
plt.plot(df['Time'], df['Data'], label='Original Data', 
color='blue', alpha=0.6)
plt.plot(df['Time'], df['Moving_Average'], label=f'Moving 
Average (window={window_size})', color='red')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.title('Trend Fitting Using Moving Average Method')
plt.show()


5.Measurement of Seasonal indices Ratio-to-Trend method
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
np.random.seed(0)
# Generate synthetic time series data
periods = 4 # Number of seasons in a year
years = 5
time = np.arange(1, periods * years + 1)
trend = np.linspace(10, 20, periods * years) # Linear 
trend
seasonal_pattern = np.tile([1.2, 0.8, 1.5, 0.5], years) 
# Seasonal component
noise = np.random.normal(0, 0.1, size=time.shape) # 
Random noise
data = trend * seasonal_pattern + noise
# Create a pandas DataFrame
df = pd.DataFrame({'Time': time, 'Data': data})
# Define the window size for the moving average (should 
be the length of one period)
window_size = periods
# Calculate the moving average as the trend
df['Trend'] = df['Data'].rolling(window=window_size, 
center=True).mean()
# Drop NaN values resulting from the moving average 
calculation
df.dropna(inplace=True)
# Calculate the ratio of actual values to the trend 
values
df['Ratio'] = df['Data'] / df['Trend']
# Compute the average ratio for each season
seasonal_indices = df.groupby(df['Time'] % 
periods)['Ratio'].mean()
# Normalize the seasonal indices to have an average of 1
seasonal_indices /= seasonal_indices.mean()
print("Seasonal Indices:")
print(seasonal_indices)
 # Plot the original data and the trend
plt.figure(figsize=(12, 6))
plt.plot(df['Time'], df['Data'], label='Original Data', 
color='blue', alpha=0.6)
plt.plot(df['Time'], df['Trend'], label='Trend (Moving 
Average)', color='red')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.title('Original Data and Trend')
plt.show()
 # Plot the seasonal indices
plt.figure(figsize=(12, 6))
plt.bar(seasonal_indices.index, seasonal_indices.values, 
color='green')
plt.xlabel('Season')
plt.ylabel('Seasonal Index')
plt.title('Seasonal Indices (Ratio-to-Trend Method)')
plt.show()


6. Measurement of Seasonal indices Ratio-to-Moving Average method.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
np.random.seed(0)
# Generate synthetic time series data
periods = 4 # Number of seasons in a year
years = 5
time = np.arange(1, periods * years + 1)
trend = np.linspace(10, 20, periods * years) # Linear 
trend
seasonal_pattern = np.tile([1.2, 0.8, 1.5, 0.5], years) # 
Seasonal component
noise = np.random.normal(0, 0.1, size=time.shape) # Random 
noise
data = trend * seasonal_pattern + noise
# Create a pandas DataFrame
df = pd.DataFrame({'Time': time, 'Data': data})
# Define the window size for the moving average (should be 
the length of one period)
window_size = periods
# Calculate the moving average as the trend
df['Moving_Average'] = 
df['Data'].rolling(window=window_size, center=True).mean()
# Drop NaN values resulting from the moving average 
calculation
df.dropna(inplace=True)
# Calculate the ratio of actual values to the moving 
average values
df['Ratio'] = df['Data'] / df['Moving_Average']
# Compute the average ratio for each season
df['Season'] = df['Time'] % periods
seasonal_indices = df.groupby('Season')['Ratio'].mean()
# Normalize the seasonal indices to have an average of 1
seasonal_indices /= seasonal_indices.mean()
print("Seasonal Indices:")
print(seasonal_indices)
# Plot the original data and the moving average
plt.figure(figsize=(12, 6))
plt.plot(df['Time'], df['Data'], label='Original Data', 
color='blue', alpha=0.6)
plt.plot(df['Time'], df['Moving_Average'], label='Moving 
Average', color='red')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.title('Original Data and Moving Average')
plt.show()
# Plot the seasonal indices
plt.figure(figsize=(12, 6))
plt.bar(seasonal_indices.index, seasonal_indices.values, 
color='green')
plt.xlabel('Season')
plt.ylabel('Seasonal Index')
plt.title('Seasonal Indices (Ratio-to-Moving Average 
Method)')
plt.show()


7.Measurement of seasonal indices Link Relative method.
# Example sales data for 3 years (36 months)
np.random.seed(0)
data = {
 'Year': np.repeat([1, 2, 3], 12),
 'Month': list(range(1, 13)) * 3,
 'Sales': np.random.randint(80, 120, size=36)
}
df = pd.DataFrame(data)
# Calculate Link Relatives
df['Link_Relative'] = df['Sales'] / df['Sales'].shift(1)
df['Link_Relative'].iloc[::12] = np.nan # Reset for the 
start of each year
# Calculate Average Link Relatives
average_link_relatives = 
df.groupby('Month')['Link_Relative'].mean()
# Adjusting so the average of indices is 100
average_link_relatives = average_link_relatives.fillna(1) 
# Replace NaN with 1 for calculation
seasonal_indices = (average_link_relatives / 
average_link_relatives.mean()) * 100
seasonal_indices


8.Measurement of seasonal indices Link Relative method
import numpy as np
import pandas as pd
# Example sales data for 3 years (36 months)
np.random.seed(0)
data = {
 'Year': np.repeat([1, 2, 3], 12),
 'Month': list(range(1, 13)) * 3,
 'Sales': np.random.randint(80, 120, size=36)
}
df = pd.DataFrame(data)
# Calculate Differences
df['Difference'] = df['Sales'].diff()
df = df.dropna() # Remove NaN values resulting from 
the difference calculation
# Calculate the Variance of Differences
variance_difference = df['Difference'].var()
variance_difference


9.Forecasting by exponential smoothing.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import SimpleExpSmoothing, Holt, ExponentialSmoothing

# Sample data: Monthly airline passengers
data = [112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118,
        115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140,
        145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166,
        171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194,
        196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201,
        204, 188, 235, 227, 234, 264, 302, 293, 259, 229, 203, 242,
        233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278, 284,
        277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306, 315,
        301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336, 340,
        318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337, 360,
        342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405, 417,
        391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432]
# Create a pandas Series
data_series = pd.Series(data)
# Plot the original data
plt.figure(figsize=(10, 6))
plt.plot(data_series, label='Original Data')
plt.title('Monthly Airline Passengers')
plt.xlabel('Month')
plt.ylabel('Number of Passengers')
plt.legend()
plt.show()
# Apply Simple Exponential Smoothing
ses_model = SimpleExpSmoothing(data_series).fit(smoothing_level=0.2, optimized=False)
ses_forecast = ses_model.forecast(12)
# Apply Holt's Linear Trend Model
holt_model = Holt(data_series).fit(smoothing_level=0.8, smoothing_slope=0.2)
holt_forecast = holt_model.forecast(12)
# Apply Holt-Winters Seasonal Model
hw_model = ExponentialSmoothing(data_series, seasonal='add', seasonal_periods=12).fit()
hw_forecast = hw_model.forecast(12)
# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(data_series, label='Original Data')
plt.plot(ses_model.fittedvalues, label='SES Fitted', color='orange')
plt.plot(np.arange(len(data_series), len(data_series) + 12), ses_forecast, label='SES Forecast', color='orange', linestyle='--')
plt.plot(holt_model.fittedvalues, label='Holt Fitted', color='green')
plt.plot(np.arange(len(data_series), len(data_series) + 12), holt_forecast, label='Holt Forecast', color='green', linestyle='--')
plt.plot(hw_model.fittedvalues, label='HW Fitted', color='red')
plt.plot(np.arange(len(data_series), len(data_series) + 12), hw_forecast, label='HW Forecast', color='red', linestyle='--')
plt.title('Exponential Smoothing Forecasting')
plt.xlabel('Month')
plt.ylabel('Number of Passengers')
plt.legend()
plt.show()


10.Forecasting by short term forecasting methods.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Generate synthetic data: Monthly data for 2 years (24 points)
np.random.seed(42)
data = np.random.normal(100, 10, 24).tolist()

# Create a pandas Series
data_series = pd.Series(data)

# Plot the original data
plt.figure(figsize=(10, 6))
plt.plot(data_series, label='Original Data')
plt.title('Synthetic Time Series Data')
plt.xlabel('Month')
plt.ylabel('Value')
plt.legend()
plt.show()

# Moving Average
def moving_average(series, window):
    return series.rolling(window=window).mean()

# Weighted Moving Average
def weighted_moving_average(series, weights):
    weights = np.asarray(weights)
    return series.rolling(window=len(weights)).apply(lambda x: np.dot(x, weights), raw=True)

# Simple Exponential Smoothing
def simple_exponential_smoothing(series, alpha):
    result = [series[0]]  # first value is same as series
    for n in range(1, len(series)):
        result.append(alpha * series[n] + (1 - alpha) * result[n-1])
    return result

# Apply Moving Average with a window of 3
ma_window = 3
ma_forecast = moving_average(data_series, ma_window)

# Apply Weighted Moving Average with weights [0.1, 0.2, 0.3, 0.4]
wma_weights = [0.1, 0.2, 0.3, 0.4]
wma_forecast = weighted_moving_average(data_series, wma_weights)

# Apply Simple Exponential Smoothing with alpha = 0.2
ses_alpha = 0.2
ses_forecast = simple_exponential_smoothing(data_series, ses_alpha)

# Convert SES forecast to pandas Series for plotting
ses_forecast_series = pd.Series(ses_forecast, index=data_series.index)

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(data_series, label='Original Data')
plt.plot(ma_forecast, label='Moving Average (window=3)', color='orange')
plt.plot(wma_forecast, label='Weighted Moving Average (weights=[0.1, 0.2, 0.3, 0.4])', color='green')
plt.plot(ses_forecast_series, label='Simple Exponential Smoothing (alpha=0.2)', color='red')
plt.title('Short-Term Forecasting Methods')
plt.xlabel('Month')
plt.ylabel('Value')
plt.legend()
plt.show()

