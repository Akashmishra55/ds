pratic1:-DDL STATEMENTS
CREATE database Cinema;
Use Cinema;
//CREATE TABLES
// Query for customers table 
CREATE TABLE Customers (
CustId VARCHAR2(50) PRIMARY KEY, 
Name VARCHAR2(50),
Contact_no VARCHAR2(50),
CONSTRAINT chk_contact_no_length CHECK (LENGTH(Contact_no) <= 10)
);
CREATE TABLE Movie (
MovieID VARCHAR(50) PRIMARY KEY, 
Name VARCHAR(50),
ActorName VARCHAR(50), 
ActressName VARCHAR(50), 
DirectorName VARCHAR(50), 
ReleaseDate DATE, 
CountryName VARCHAR(50), 
Price DECIMAL(9,2)
);
CREATE TABLE Screen (
ScreenID VARCHAR(50) PRIMARY KEY NOT NULL, 
Name VARCHAR(50),
MovieID VARCHAR(50),
Capacity VARCHAR(50),
CONSTRAINT fk_movie FOREIGN KEY (MovieID) REFERENCES Movie(MovieID)
)
//Query for table Tickets 
CREATE TABLE Tickets(
TicketID VARCHAR(50) PRIMARY KEY NOT NULL, 
MovieID VARCHAR(50),
ScreenID VARCHAR(50),
Date DATE,
Price DECIMAL(9,2),
CONSTRAINT fk_ticket_movie FOREIGN KEY (MovieID) REFERENCES Movie(MovieID), 
CONSTRAINT fk_ticket_screen FOREIGN KEY (ScreenID) REFERENCES Screen(ScreenID)
);
//insert Query for Customer table
INSERT INTO Customer (CustId, Name, Contact_no) VALUES 
('C001', 'Rahul Sharma', '9876543210'),
('C002', 'Priya Singh', '9123456789'),
('C003', 'Arjun Mehta', '9988776655'),
('C004', 'Sneha Gupta', '8765432109'),
('C005', 'Aditi Verma', '9988112233');
//insert Query for Movie table
INSERT INTO Movie (MovieID, Name, ActorName, ActressName, DirectorName, ReleaseDate,
CountryName, Price) VALUES
('M001', 'Kabir Singh', 'Shahid Kapoor', 'Kiara Advani', 'Sandeep Reddy Vanga', '2019-06-21', 'India', 350.00), 
('M002', 'Bajrangi Bhaijaan', 'Salman Khan', 'Harshaali Malhotra', 'Kabir Khan', '2015-07-17', 'India', 400.00), 
('M003', '3 Idiots', 'Aamir Khan', 'Kareena Kapoor', 'Rajkumar Hirani', '2009-12-25', 'India', 300.00), 
('M004', 'Dangal', 'Aamir Khan', 'Fatima Sana Shaikh', 'Nitesh Tiwari', '2016-12-23', 'India', 450.00), 
('M005', 'Chennai Express', 'Shah Rukh Khan', 'Deepika Padukone', 'Rohit Shetty', '2013-08-09', 'India', 
380.00);
//insert Query for Screen table
INSERT INTO Screen (ScreenID, Name, MovieID, Capacity) VALUES 
('S001', 'PVR Juhu', 'M001', '200'),
('S002', 'Inox Mall', 'M002', '250'),
('S003', 'Cinepolis', 'M003', '300'),
('S004', 'SRS Cinemas', 'M004', '150'),
('S005', 'Big Cinemas', 'M005', '220');
//insert Query for Tickets table
INSERT INTO Tickets (TicketID, MovieID, ScreenID, Date, Price) VALUES 
('T001', 'M001', 'S001', '2023-10-01', 350.00),
('T002', 'M002', 'S002', '2023-10-02', 400.00),
('T003', 'M003', 'S003', '2023-10-03', 300.00),
('T004', 'M004', 'S004', '2023-10-04', 450.00),
('T005', 'M005', 'S005', '2023-10-05', 380.00);
//SELECT QUERY TO WATCH THE DATA ENTRY INSIDE THE TABLES
SELECT * FROM Customers; 
SELECT * FROM Movie;
SELECT * FROM Screen; 
SELECT * FROM TICKETS;
//Delete Query for Tickets table
DELETE FROM Tickets;



@@@praa2:-DML statements joins and queries

CREATE TABLE Patient( 
Patient_id VARCHAR, 
Patient_name VARCHAR, 
Address VARCHAR,
Age INT,
Ailment VARCHAR);
CREATE TABLE Doctor(
Doc_id VARCHAR, 
Doc_name VARCHAR, 
Specialization VARCHAR, 
Qualification VARCHAR);
CREATE TABLE Admit(
Bed_no VARCHAR, 
Patient_id VARCHAR, 
Doc_id VARCHAR, 
Disease VARCHAR, 
Dt_of_admit DATE, 
Dt_of_discharge DATE);
INSERT INTO Patient VALUES
('P01', 'Santosh', 'Mumbai', 67, 'Heart attack'),
('P02', 'Rohini', 'Bangalore', 65, 'Stroke'),
('P03', 'Tilak', 'Mumbai', 54, 'Backache'),
('P04', 'Rohini', 'Chennai', 34, 'Stomach ache'),
('P05', 'Riddhi', 'Mumbai', 25, 'Fever'); 
SELECT * FROM Patient;
INSERT INTO Doctor VALUES
('D01', 'Ragini', 'Cardiac', 'MD'),
('D02', 'Rishav', 'Gynaecology', 'MD'),
('D03', 'Somnath', 'Cardiac', 'MD'),
('D04', 'Raghav', 'General', 'MD'),
('D05', 'Royston', 'General', 'MBBS'); 
SELECT * FROM Doctor;
INSERT INTO Admit VALUES
('B01', 'P01', 'D01', 'Heart related', '22-01-2023', '25-01-2023'),
('B02', 'P02', 'D01', 'Heart related', '11-02-2024', '12-03-2024'),
('B03', 'P05', 'D05', 'Dengue', '15-03-2024', '22-03-2024'); 
SELECT * FROM Admit;
//2. Print the names of the patients who are treated by Dr. Ragini
SELECT p.Patient_name 
FROM Patient p
JOIN Admit a
ONp.Patient_id = a.Patient_id 
JOIN Doctor D
ON a.Doc_id = d.Doc_id 
WHERE d.Doc_name = 'Ragini';
//3. Print the names of the patients who are not admitted
SELECT Patient_name 
FROM Patient
WHERE Patient_id NOT IN 
(SELECT p.Patient_id 
FROM Patient p
JOIN Admit a
ON p.Patient_id = a.Patient_id);
//4. Print the details of the doctors who are General physicians.
SELECT *
FROM Doctor
WHERE Specialization = 'General';
//5. Print the details of the docto who is treating Riddhi
SELECT d.*
FROM Doctor d 
JOIN Admit a
ONd.Doc_id = a.Doc_id 
JOIN Patient p
ON a.Patient_id = p.Patient_id 
WHERE p.Patient_name = 'Riddhi';
//6. Update the date_of_discharge for patient P01 to ‘26-01-2023’
UPDATE Admit
SETDt_of_discharge = '26-01-2023' 
WHERE Patient_id = 'P01';
SELECT * FROM Admit;
//7. Rename the “Ailment” column of “Patient” table to symptoms.
ALTER TABLE Patient
RENAME Ailment TO Symptoms
//8. Delete the patients records who have not been admitted.
DELETE
FROM Patient
WHERE Patient_id NOT IN 
(
SELECT p.Patient_id
FROM Patient p 
JOIN Admit a
ON p.Patient_id = a.Patient_id);
SELECT * FROM Patient;


pra!!!3:-MongoDB basic queries
// Switch to a database (or create it if it doesn’t exist)
use database_name
// Show all collections in the database
show collections
// Insert a single document into a collection
db.collection_name.insertOne({ name: "John", age: 25, city: "Mumbai" })

// Insert multiple documents into a collection
db.collection_name.insertMany([
  { name: "Alice", age: 30, city: "Delhi" },
  { name: "Bob", age: 22, city: "Bangalore" }
])
// Find all documents in a collection
db.collection_name.find()

// Find documents with a condition
db.collection_name.find({ city: "Mumbai" })

// Find a single document
db.collection_name.findOne({ name: "Alice" })
// Update a single document
db.collection_name.updateOne(
  { name: "John" },                     // Filter
  { $set: { age: 26 } }                 // Update operation
)

// Update multiple documents
db.collection_name.updateMany(
  { city: "Delhi" },                    // Filter
  { $set: { state: "Delhi NCR" } }      // Update operation
)
// Delete a single document
db.collection_name.deleteOne({ name: "Bob" })

// Delete multiple documents
db.collection_name.deleteMany({ city: "Mumbai" })
// Count all documents
db.collection_name.countDocuments()

// Count documents with a condition
db.collection_name.countDocuments({ city: "Delhi" })
// Sort by age in ascending order
db.collection_name.find().sort({ age: 1 })

// Sort by age in descending order
db.collection_name.find().sort({ age: -1 })
// Limit to 5 documents
db.collection_name.find().limit(5)
db.collection_name.find().sort({ age: -1 }).limit(3)
// Create an index on the 'name' field
db.collection_name.createIndex({ name: 1 })
// Drop a collection
db.collection_name.drop()



###pratic4:-Mongodb map reduce and filter queries

db.collection_name.mapReduce(
   function() { /* map function */ },
   function(key, values) { /* reduce function */ },
   {
      out: "output_collection_name", // Output collection
      query: { /* Optional filter */ },
      sort: { /* Optional sorting */ },
      limit: 100 // Optional limit
   }
)
#filter queries with map reduce
db.documents.mapReduce(
   function() {
       // Map function: emit each word as key with a value of 1
       this.text.split(" ").forEach(word => emit(word, 1));
   },
   function(key, values) {
       // Reduce function: sum up all values for each key
       return Array.sum(values);
   },
   {
      out: "word_count" // Output collection name
   }
)

// View the result
db.word_count.find()
db.sales.mapReduce(
   function() {
       emit(this.product, this.amount); // Emit product as key and amount as value
   },
   function(key, values) {
       return Array.sum(values); // Sum up the sales for each product
   },
   {
      out: "total_sales"
   }
)

// View the result
db.total_sales.find()
db.documents.mapReduce(
   function() {
       this.text.split(" ").forEach(word => emit(word, 1));
   },
   function(key, values) {
       return Array.sum(values);
   },
   {
      query: { author: "John Doe" }, // Filter documents by author
      out: "filtered_word_count"
   }
)

db.filtered_word_count.find()



&&&pract5:-hadoop shell command
# Start Hadoop
start-dfs.sh
start-yarn.sh

# Stop Hadoop
stop-dfs.sh
stop-yarn.sh# List files and directories in the HDFS root directory
hdfs dfs -ls /

# List files recursively
hdfs dfs -ls -R /

# Check disk usage of HDFS directory
hdfs dfs -du -s /directory_name

# View detailed HDFS disk usage
hdfs dfs -df -h
# Create a directory in HDFS
hdfs dfs -mkdir /directory_name
# Copy a local file to HDFS
hdfs dfs -put /local/path/file.txt /hdfs/path/hadoop version
# Copy a file from HDFS to the local filesystem
hdfs dfs -get /hdfs/path/file.txt /local/path/
# Display the contents of a file
hdfs dfs -cat /hdfs/path/file.txt
# View the first few lines of a file
hdfs dfs -tail /hdfs/path/file.txt
# Delete a file from HDFS
hdfs dfs -rm /hdfs/path/file.txt
# Delete a directory and its contents
hdfs dfs -rm -r /directory_name


&&&&pra6:-pig word count and map reduce
hello world
hello Hadoop
hello Pig
pig
-- Load the input file into Pig
input_data = LOAD 'input.txt' USING PigStorage(' ') AS (line:chararray);
-- Tokenize the lines into words
words = FOREACH input_data GENERATE (TOKENIZE(line)) AS word;
-- Group words by their value
grouped_words = GROUP words BY word;

-- Count the occurrences of each word
word_count = FOREACH grouped_words GENERATE group AS word, COUNT(words) AS count;
-- Store the result into an HDFS directory
STORE word_count INTO 'output' USING PigStorage('\t');
hdfs dfs -cat output/part-r
++++pra7:-give table
input_data = LOAD 'input.txt' USING PigStorage(' ') AS (line:chararray);
words = FOREACH input_data GENERATE FLATTEN(TOKENIZE(line)) AS word;
grouped_words = GROUP words BY word;
word_count = FOREACH grouped_words GENERATE group AS word, COUNT(words) AS count;
STORE word_count INTO 'output' USING PigStorage('\t');
