7.Develop a program to automate repetitive HR processes, such as leave management or performance appraisal.
install.packages("readr")
library(readr)
PerfRew <- read_csv("PerfMgmtRewardSystemsExample.csv")
# Print the names of the variables in the data frame (tibble) object
names(PerfRew)
# Print variable type for each variable in data frame (tibble) object
str(PerfRew)
# Print first 6 rows of data frame (tibble) object
head(PerfRew)
# Print number of rows in data frame (tibble) object
nrow(PerfRew)
install.packages("psych")
library(psych)
# Estimate Cronbach's alpha for the four-item Engagement measure
alpha(PerfRew[,c("Perf_Qual","Perf_Prod","Perf_Effort","Perf_Admin")])
# Create composite (overall scale score) variable based on Engagement items
PerfRew$Perf_Overall <-
rowMeans(PerfRew[,c("Perf_Qual","Perf_Prod","Perf_Effort","Perf_Admin")], 
 na.rm=TRUE)
install.packages("dplyr")
library(dplyr)
PerfRew$Sex <- recode(PerfRew$Sex,
 Female = 1,
 Male = 0)
install.packages("lessR")
library(lessR)
# Create scatter plot using ScatterPlot function from lessR
ScatterPlot(x=Perf_Overall, y=SalesRevenue, data=PerfRew)
# Optional: Styling the scatter plot
ScatterPlot(x=Perf_Overall, y=SalesRevenue, data=PerfRew, 
 xlab="Overall Performance Evaluation Score",
 ylab="Annual Sales Revenue Generated ($)")
# Optional: Styling the scatter plot
ScatterPlot(x=Perf_Overall, y=SalesRevenue, data=PerfRew, 
 xlab="Overall Performance Evaluation Score",
 ylab="Annual Sales Revenue Generated ($)",
 ellipse=TRUE)
install.packages("tidyr")
library(tidyr)
# Drop cases (rows) where either Perf_Overall or SalesRevenue
# have missing data (NAs) & pipe (%>%) the resulting data
# frame to the nrow function
drop_na(PerfRew, Perf_Overall, SalesRevenue) %>% nrow()
# Create box plot
BoxPlot(Perf_Overall, data=PerfRew)
# Create box plot
BoxPlot(SalesRevenue, data=PerfRew)
# Estimate Pearson product-moment correlation using Correlation function from lessR
Correlation(x=Perf_Overall, y=SalesRevenue, data=PerfRew)
BoxPlot(Perf_Overall, data=PerfRew)
corr.test(PerfRew, method="pearson")
# Create correlation matrix objet with p-values & confidence intervals
matrixexample <- corr.test(PerfRew, method="pearson")
# Print correlation matrix with p-values & confidence intervals
print(matrixexample, short=FALSE)
# Install package
install.packages("apaTables")
library(apaTables)
apa.cor.table(PerfRew)
apa.cor.table(PerfRew, filename="APA Correlation Matrix Table.doc")
cor.plot(matrixexample2, numbers=TRUE)


8.Analyze the organizationâ€™s compensation structure and compare it to industry benchmarks
library(readr)
# Read data and name data frame (tibble) object
md <- read_csv("MarketSurveyData.csv")
ABG <- .031
MBG <- ABG / 12
AF <- (MBG * 7) + 1
md$Survey_1_aged <- md$Survey_1 * AF
# Optional: Round the new variable to two digits after the decimal
md$Survey_1_aged <- round(md$Survey_1_aged, 2)
print(md$Survey_1_aged)
md$Survey_2_aged <- round(md$Survey_2 * AF, 2)
md$Survey_3_aged <- round(md$Survey_3 * AF, 2)
# Optional: Create an aging function
age <- function(data, ABG, age_months) {
 MBG <- ABG / 12
 AF <- (MBG * age_months) + 1
 round((data * AF), 2)
}
md$Survey_1_aged <- age(data=md$Survey_1, ABG=.031, age_months=7)
print(md$Survey_1_aged)
Age remaining market survey data (with rounding to two digits)
md$Survey_2_aged <- age(data=md$Survey_2, ABG=.031, age_months=7)
md$Survey_3_aged <- age(data=md$Survey_3, ABG=.031, age_months=7)
# Compute sample-weighted means
md$Weighted_Mean <-
 ((md$Survey_1_aged * md$SS_Survey_1) + (md$Survey_2_aged * md$SS_Survey_2) + 
(md$Survey_3_aged * md$SS_Survey_3)) / 
 (md$SS_Survey_1 + md$SS_Survey_2 + md$SS_Survey_3)
# Compute sample-weighted means
md$Weighted_Mean <-
 ((md$Survey_1_aged * md$SS_Survey_1) + (md$Survey_2_aged * md$SS_Survey_2) + 
(md$Survey_3_aged * md$SS_Survey_3)) / 
 (md$SS_Survey_1 + md$SS_Survey_2 + md$SS_Survey_3)
# Optional: Round the new variable to two digits after the decimal
md$Weighted_Mean <- round(md$Weighted_Mean, 2)
View(md)
print(md$Weighted_Mean)
# Optional: Create a sample-weighted mean function
weighted.mean <- function(pay_rates, sample_sizes) {
 a <- matrix(pay_rates, nrow=nrow(md))
 b <- matrix(sample_sizes, nrow=nrow(md))
 c <- a * b
 d <- rowSums(c) / rowSums(b)
 round(d, 2)
}


1.Analyze employee turnover rates and identify factors contributing to attrition.
install.packages("tidyverse")
install.packages("Information")
install.packages("caret")
# Load the essential libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate, warn.conflicts = FALSE)
library(Information)
library(caret)
#load the dataset
org <- read_csv("org.csv")
# Check the structure of the org dataset
glimpse(org)
org %>%
 count(status)
# Calculate the overall turnover rate
org %>%
 summarize(avg_turnover_rate = mean(turnover))
# Differentiate turnover by the employee level
df_level <- org %>%
 group_by(level) %>%
 summarize(turnover_level = mean(turnover))
# Check the results
df_level
# Visualize turnover by employee level
ggplot(df_level, aes(x = level, y = turnover_level)) + geom_col()
Differentiate turnover by office location
df_location <- org %>%
 group_by(location) %>%
 summarize(turnover_location = mean(turnover))
# Check the results
df_location
# Visualize turnover by office location
ggplot(df_location, aes(x = location, y = turnover_location)) + geom_col()
survey <- read_csv("survey.csv")
# View the structure of the survey dataset
glimpse(survey)
# Join survey to the org3 dataset
org_final <- left_join(org3, survey, by = "mgr_id")
# Visualize and compare manager effectiveness scores
ggplot(org_final, aes(x = status, y = mgr_effectiveness)) + geom_boxplot()


2. Develop a user friendly HRIS dashboard to monitoring and anlyzing HR matrics. 
: library(dplyr)
library(ggplot2)
library(lubridate)
# Load the dataset
data <- read.csv("HR_Analytics.csv")
head(data)
# Check for missing values
sum(is.na(data))
# Ensure there are no missing values
if (sum(is.na(data)) > 0) {
 data <- na.omit(data)
}
# Gender distribution pie chart
gender_distribution <- data %>%
 group_by(Gender) %>%
 summarise(Count = n()) %>%
 mutate(Percentage = round(Count / sum(Count) * 100, 1))
# Plot
ggplot(gender_distribution, aes(x = "", y = Percentage, fill = Gender)) +
 geom_bar(width = 1, stat = "identity") +
 coord_polar("y", start = 0) +
 theme_void() +
 geom_text(aes(label = paste0(Percentage, "%")), 
 position = position_stack(vjust = 0.5)) +
 labs(title = "Gender Distribution of Employees") +
 scale_fill_brewer(palette = "Set3")
# Education Level Distribution
library(ggplot2)
ggplot(data, aes(x = factor(Education, levels = c(1, 2, 3, 4, 5)), 
 fill = factor(Education))) +
 geom_bar() +
 labs(title = "Distribution of Education Levels",
 x = "Education Level",
 y = "Number of Employees",
 fill = "Education Level") +
 scale_x_discrete(labels = c("1" = "Below College", "2" = "College", "3" = "Bachelor",
 "4" = "Master", "5" = "Doctor"))
# Employee Age Distribution
ggplot(data, aes(x = Age)) +
 geom_histogram(binwidth = 5, fill = "green", color = "black") +
 labs(title = "Age Distribution of Employees",
 x = "Age",
 y = "Count")
# Job Role Distribution
ggplot(data, aes(x = JobRole, fill = JobRole)) +
 geom_bar() +
 labs(title = "Distribution of Job Roles",
 x = "Job Role",
 y = "Count") +
 theme(axis.text.x = element_text(angle = 45, hjust = 1))

