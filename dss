7.Develop a program to automate repetitive HR processes, such as leave management or performance appraisal.
install.packages("readr")
library(readr)
PerfRew <- read_csv("PerfMgmtRewardSystemsExample.csv")
# Print the names of the variables in the data frame (tibble) object
names(PerfRew)
# Print variable type for each variable in data frame (tibble) object
str(PerfRew)
# Print first 6 rows of data frame (tibble) object
head(PerfRew)
# Print number of rows in data frame (tibble) object
nrow(PerfRew)
install.packages("psych")
library(psych)
# Estimate Cronbach's alpha for the four-item Engagement measure
alpha(PerfRew[,c("Perf_Qual","Perf_Prod","Perf_Effort","Perf_Admin")])
# Create composite (overall scale score) variable based on Engagement items
PerfRew$Perf_Overall <-
rowMeans(PerfRew[,c("Perf_Qual","Perf_Prod","Perf_Effort","Perf_Admin")], 
 na.rm=TRUE)
install.packages("dplyr")
library(dplyr)
PerfRew$Sex <- recode(PerfRew$Sex,
 Female = 1,
 Male = 0)
install.packages("lessR")
library(lessR)
# Create scatter plot using ScatterPlot function from lessR
ScatterPlot(x=Perf_Overall, y=SalesRevenue, data=PerfRew)
# Optional: Styling the scatter plot
ScatterPlot(x=Perf_Overall, y=SalesRevenue, data=PerfRew, 
 xlab="Overall Performance Evaluation Score",
 ylab="Annual Sales Revenue Generated ($)")
# Optional: Styling the scatter plot
ScatterPlot(x=Perf_Overall, y=SalesRevenue, data=PerfRew, 
 xlab="Overall Performance Evaluation Score",
 ylab="Annual Sales Revenue Generated ($)",
 ellipse=TRUE)
install.packages("tidyr")
library(tidyr)
# Drop cases (rows) where either Perf_Overall or SalesRevenue
# have missing data (NAs) & pipe (%>%) the resulting data
# frame to the nrow function
drop_na(PerfRew, Perf_Overall, SalesRevenue) %>% nrow()
# Create box plot
BoxPlot(Perf_Overall, data=PerfRew)
# Create box plot
BoxPlot(SalesRevenue, data=PerfRew)
# Estimate Pearson product-moment correlation using Correlation function from lessR
Correlation(x=Perf_Overall, y=SalesRevenue, data=PerfRew)
BoxPlot(Perf_Overall, data=PerfRew)
corr.test(PerfRew, method="pearson")
# Create correlation matrix objet with p-values & confidence intervals
matrixexample <- corr.test(PerfRew, method="pearson")
# Print correlation matrix with p-values & confidence intervals
print(matrixexample, short=FALSE)
# Install package
install.packages("apaTables")
library(apaTables)
apa.cor.table(PerfRew)
apa.cor.table(PerfRew, filename="APA Correlation Matrix Table.doc")
cor.plot(matrixexample2, numbers=TRUE)


8.Analyze the organizationâ€™s compensation structure and compare it to industry benchmarks
library(readr)
# Read data and name data frame (tibble) object
md <- read_csv("MarketSurveyData.csv")
ABG <- .031
MBG <- ABG / 12
AF <- (MBG * 7) + 1
md$Survey_1_aged <- md$Survey_1 * AF
# Optional: Round the new variable to two digits after the decimal
md$Survey_1_aged <- round(md$Survey_1_aged, 2)
print(md$Survey_1_aged)
md$Survey_2_aged <- round(md$Survey_2 * AF, 2)
md$Survey_3_aged <- round(md$Survey_3 * AF, 2)
# Optional: Create an aging function
age <- function(data, ABG, age_months) {
 MBG <- ABG / 12
 AF <- (MBG * age_months) + 1
 round((data * AF), 2)
}
md$Survey_1_aged <- age(data=md$Survey_1, ABG=.031, age_months=7)
print(md$Survey_1_aged)
Age remaining market survey data (with rounding to two digits)
md$Survey_2_aged <- age(data=md$Survey_2, ABG=.031, age_months=7)
md$Survey_3_aged <- age(data=md$Survey_3, ABG=.031, age_months=7)
# Compute sample-weighted means
md$Weighted_Mean <-
 ((md$Survey_1_aged * md$SS_Survey_1) + (md$Survey_2_aged * md$SS_Survey_2) + 
(md$Survey_3_aged * md$SS_Survey_3)) / 
 (md$SS_Survey_1 + md$SS_Survey_2 + md$SS_Survey_3)
# Compute sample-weighted means
md$Weighted_Mean <-
 ((md$Survey_1_aged * md$SS_Survey_1) + (md$Survey_2_aged * md$SS_Survey_2) + 
(md$Survey_3_aged * md$SS_Survey_3)) / 
 (md$SS_Survey_1 + md$SS_Survey_2 + md$SS_Survey_3)
# Optional: Round the new variable to two digits after the decimal
md$Weighted_Mean <- round(md$Weighted_Mean, 2)
View(md)
print(md$Weighted_Mean)
# Optional: Create a sample-weighted mean function
weighted.mean <- function(pay_rates, sample_sizes) {
 a <- matrix(pay_rates, nrow=nrow(md))
 b <- matrix(sample_sizes, nrow=nrow(md))
 c <- a * b
 d <- rowSums(c) / rowSums(b)
 round(d, 2)
}
